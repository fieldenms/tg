#---------------------------------------------------------------------
# Global settings
#---------------------------------------------------------------------

global
    maxconn     4000

    tune.ssl.default-dh-param 1024
    debug

    # F06
    # https://mozilla.github.io/server-side-tls/ssl-config-generator/
    # Note: HAProxy 1.7.9, OpenSSL 1.0.1t
    # set default parameters to the intermediate configuration
    tune.ssl.default-dh-param 2048
    ssl-default-bind-ciphers ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS
    ssl-default-bind-options no-sslv3 no-tls-tickets
    ssl-default-server-ciphers ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS
    ssl-default-server-options no-sslv3 no-tls-tickets
    # /F06

#---------------------------------------------------------------------
# common defaults that all the 'listen' and 'backend' sections will
# use if not designated in their block
#---------------------------------------------------------------------

defaults
    mode                    http
    log                     global
    option                  httplog
    option                  dontlognull
    option                  http-keep-alive
    option                  forwardfor except 127.0.0.0/8
    option                  redispatch
    retries                 3
    timeout http-request    10s
    timeout queue           1m
    timeout connect         10s
    timeout client          1m
    timeout server          20m
    timeout http-keep-alive 30s
    timeout check           10s
    maxconn                 3000

#---------------------------------------------------------------------
# main frontend which proxys to the backends
#---------------------------------------------------------------------

frontend main
    bind *:80

    # Self-signed:
    #bind *:443 ssl ca-file /usr/local/etc/haproxy/CA.crt crt /usr/local/etc/haproxy/certs
    # Let's Encrypt:
    bind *:443 ssl crt /usr/local/etc/haproxy/haproxy.pem alpn h2,http/1.1
    option httplog
    mode http

    # https://mozilla.github.io/server-side-tls/ssl-config-generator/
    # Note: HAProxy 1.7.9, OpenSSL 1.0.1t
    # below: redirect scheme https code 301 if !{ ssl_fc }
    # HSTS (15768000 seconds = 6 months)
    # below: http-response set-header Strict-Transport-Security max-age=15768000

    # https://arstechnica.com/information-technology/2015/05/web-served-how-to-make-your-site-all-https-all-the-time-for-everyone/
    # [...] an ACL called secure that matches anything headed for destination TCP port 443.
    acl secure dst_port eq 443
    # This tells HAProxy that if an incoming request is not HTTPS, to send a 301 redirect for the same resource with the HTTPS scheme instead of HTTP.
    # Here we use the rspadd config option to append the HSTS header at the end of HTTP requests.
    rspadd Strict-Transport-Security:\ max-age=31536000;\ includeSubDomains;\ preload

    # https://stackoverflow.com/questions/13227544/haproxy-redirecting-http-to-https-ssl
    redirect scheme https if !{ ssl_fc }

    acl is_tgdev hdr_beg(host) tgdev.com

    use_backend tgdev if is_tgdev

#---------------------------------------------------------------------
# backend for TG Air running on docker2
#---------------------------------------------------------------------

backend tgdev
    mode http
    # https://arstechnica.com/information-technology/2015/05/web-served-how-to-make-your-site-all-https-all-the-time-for-everyone/
    # [set] the X-Forwarded-Port header so that [the server knows] that the client originally connected to port 443.
    http-request set-header X-Forwarded-Port %[dst_port]
    # [reinforce] the first, setting the X-Forwarded-Proto to HTTPS if the requests came in over HTTPSâ€”again.
    http-request add-header X-Forwarded-Proto https if { ssl_fc }
    # F08
    # Note: report-uri reports to ubuntumate1804.  If no output appears there, manually load https://192.168.1.147:8000 in the affected browser to confirm the security exception.
    #http-response set-header Content-Security-Policy "default-src https:; script-src 'self' www.google.com ajax.googleapis.com 'unsafe-eval' 'unsafe-inline'; style-src 'self' fonts.gstatic.com fonts.googleapis.com ajax.googleapis.com www.google.com 'unsafe-inline'; report-uri https://192.168.1.147:8000"
    http-response set-header Content-Security-Policy "default-src https:; script-src 'self' data: www.google.com ajax.googleapis.com 'unsafe-eval' 'unsafe-inline'; style-src 'self' fonts.gstatic.com fonts.googleapis.com ajax.googleapis.com www.google.com 'unsafe-inline'"
    http-response set-header X-Frame-Options SAMEORIGIN
    http-response set-header X-XSS-Protection "1; mode=block"
    http-response set-header X-Content-Type-Options nosniff
    http-response set-header Referrer-Policy same-origin
    http-response set-header Feature-Policy "geolocation 'self'"
    # /F08
    balance source
    # the value of local-ip-address must be the IP of your local machine and
    # the value of port must be the same as for property port.listen and port in the application properties file
    # for example, 192.168.1.43:8091
    server eclipse1 local-ip-address:port check

#---------------------------------------------------------------------
# statistics
#---------------------------------------------------------------------

listen stats
    bind *:9000
    mode http
    stats enable
    stats hide-version
    stats realm Haproxy\ Statistics
    stats uri /
    stats auth admin:passw0rd
