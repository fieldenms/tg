package ua.com.fielden.platform.eql.antlr;

import org.antlr.v4.runtime.tree.AbstractParseTreeVisitor;
import ua.com.fielden.platform.eql.antlr.exceptions.EqlVisitorException;

/**
 * This class is a "stricter" copy of {@link EQLBaseVisitor}, generated by ANTLR, which should be used instead of {@link EQLBaseVisitor}.
 * <p>
 * Instead of the "falling through" approach in {@link EQLBaseVisitor}, visiting methods of {@link StrictEQLBaseVisitor} throw {@link EqlVisitorException}.
 * This should help preventing accidental mistakes when implementing EQL visitors.
 *
 * <h3>Rationale</h3>
 * Concrete visitors typically need only a subset of all visiting methods (e.g., a visitor of operands deals only
 * with operands). However, given the design of ANTLR visitors, it is not possible to ensure, at compile time, that
 * all <i>relevant</i> visiting methods are implemented by the visitor. Therefore, this kind of validation has to be
 * performed at runtime.
 *
 * @param <T> The return type of the visit operation. Use {@link Void} for operations with no return type.
 */
public abstract class StrictEQLBaseVisitor<T> extends AbstractParseTreeVisitor<T> implements EQLVisitor<T> {

    /**
     * Default implementation of visiting methods. Guards subclasses from calling unimplemented visitor methods by
     * throwing a runtime exception.
     */
    protected T defaultVisit() {
        throw new EqlVisitorException("Unimplemented visitor method called. This is an implementation bug.");
    }

    @Override
    public T visitStart(final EQLParser.StartContext ctx) {
        return defaultVisit();
    }

    @Override
    public T visitSelect(final EQLParser.SelectContext ctx) {
        return defaultVisit();
    }

    @Override
    public T visitStandaloneExpression(final EQLParser.StandaloneExpressionContext ctx) {
        return defaultVisit();
    }

    @Override
    public T visitStandaloneCondExpr(final EQLParser.StandaloneCondExprContext ctx) {
        return defaultVisit();
    }

    @Override
    public T visitOrderBy(final EQLParser.OrderByContext ctx) {
        return defaultVisit();
    }

    @Override
    public T visitSelectEnd_Model(final EQLParser.SelectEnd_ModelContext ctx) {
        return defaultVisit();
    }

    @Override
    public T visitSelectEnd_AnyYield(final EQLParser.SelectEnd_AnyYieldContext ctx) {
        return defaultVisit();
    }

    @Override
    public T visitWhere(final EQLParser.WhereContext ctx) {
        return defaultVisit();
    }

    @Override
    public T visitPredicateCondition(final EQLParser.PredicateConditionContext ctx) {
        return defaultVisit();
    }

    @Override
    public T visitCompoundCondition(final EQLParser.CompoundConditionContext ctx) {
        return defaultVisit();
    }

    @Override
    public T visitOrCondition(final EQLParser.OrConditionContext ctx) {
        return defaultVisit();
    }

    @Override
    public T visitNegatedCompoundCondition(final EQLParser.NegatedCompoundConditionContext ctx) {
        return defaultVisit();
    }

    @Override
    public T visitAndCondition(final EQLParser.AndConditionContext ctx) {
        return defaultVisit();
    }

    @Override
    public T visitUnaryPredicate(final EQLParser.UnaryPredicateContext ctx) {
        return defaultVisit();
    }

    @Override
    public T visitComparisonPredicate(final EQLParser.ComparisonPredicateContext ctx) {
        return defaultVisit();
    }

    @Override
    public T visitQuantifiedComparisonPredicate(final EQLParser.QuantifiedComparisonPredicateContext ctx) {
        return defaultVisit();
    }

    @Override
    public T visitLikePredicate(final EQLParser.LikePredicateContext ctx) {
        return defaultVisit();
    }

    @Override
    public T visitMembershipPredicate(final EQLParser.MembershipPredicateContext ctx) {
        return defaultVisit();
    }

    @Override
    public T visitSingleConditionPredicate(final EQLParser.SingleConditionPredicateContext ctx) {
        return defaultVisit();
    }

    @Override
    public T visitUnaryComparisonOperator(final EQLParser.UnaryComparisonOperatorContext ctx) {
        return defaultVisit();
    }

    @Override
    public T visitLikeOperator(final EQLParser.LikeOperatorContext ctx) {
        return defaultVisit();
    }

    @Override
    public T visitComparisonOperand_Single(final EQLParser.ComparisonOperand_SingleContext ctx) {
        return defaultVisit();
    }

    @Override
    public T visitComparisonOperand_Multi(final EQLParser.ComparisonOperand_MultiContext ctx) {
        return defaultVisit();
    }

    @Override
    public T visitComparisonOperator(final EQLParser.ComparisonOperatorContext ctx) {
        return defaultVisit();
    }

    @Override
    public T visitQuantifiedOperand(final EQLParser.QuantifiedOperandContext ctx) {
        return defaultVisit();
    }

    @Override
    public T visitExprBody(final EQLParser.ExprBodyContext ctx) {
        return defaultVisit();
    }

    @Override
    public T visitArithmeticalOperator(final EQLParser.ArithmeticalOperatorContext ctx) {
        return defaultVisit();
    }

    @Override
    public T visitProp(final EQLParser.PropContext ctx) {
        return defaultVisit();
    }

    @Override
    public T visitExtProp(final EQLParser.ExtPropContext ctx) {
        return defaultVisit();
    }

    @Override
    public T visitVal(final EQLParser.ValContext ctx) {
        return defaultVisit();
    }

    @Override
    public T visitParam(final EQLParser.ParamContext ctx) {
        return defaultVisit();
    }

    @Override
    public T visitSingleOperand_Expr(final EQLParser.SingleOperand_ExprContext ctx) {
        return defaultVisit();
    }

    @Override
    public T visitSingleOperand_Model(final EQLParser.SingleOperand_ModelContext ctx) {
        return defaultVisit();
    }

    @Override
    public T visitUnaryFunction(final EQLParser.UnaryFunctionContext ctx) {
        return defaultVisit();
    }

    @Override
    public T visitIfNull(final EQLParser.IfNullContext ctx) {
        return defaultVisit();
    }

    @Override
    public T visitSingleOperand_Now(final EQLParser.SingleOperand_NowContext ctx) {
        return defaultVisit();
    }

    @Override
    public T visitDateDiffInterval(final EQLParser.DateDiffIntervalContext ctx) {
        return defaultVisit();
    }

    @Override
    public T visitDateAddInterval(final EQLParser.DateAddIntervalContext ctx) {
        return defaultVisit();
    }

    @Override
    public T visitRound(final EQLParser.RoundContext ctx) {
        return defaultVisit();
    }

    @Override
    public T visitConcat(final EQLParser.ConcatContext ctx) {
        return defaultVisit();
    }

    @Override
    public T visitCaseWhen(final EQLParser.CaseWhenContext ctx) {
        return defaultVisit();
    }

    @Override
    public T visitExpr(final EQLParser.ExprContext ctx) {
        return defaultVisit();
    }

    @Override
    public T visitUnaryFunctionName(final EQLParser.UnaryFunctionNameContext ctx) {
        return defaultVisit();
    }

    @Override
    public T visitDateIntervalUnit(final EQLParser.DateIntervalUnitContext ctx) {
        return defaultVisit();
    }

    @Override
    public T visitCaseWhenEnd(final EQLParser.CaseWhenEndContext ctx) {
        return defaultVisit();
    }

    @Override
    public T visitMultiOperand(final EQLParser.MultiOperandContext ctx) {
        return defaultVisit();
    }

    @Override
    public T visitMembershipOperator(final EQLParser.MembershipOperatorContext ctx) {
        return defaultVisit();
    }

    @Override
    public T visitMembershipOperand(final EQLParser.MembershipOperandContext ctx) {
        return defaultVisit();
    }

    @Override
    public T visitJoin(final EQLParser.JoinContext ctx) {
        return defaultVisit();
    }

    @Override
    public T visitJoinOperator(final EQLParser.JoinOperatorContext ctx) {
        return defaultVisit();
    }

    @Override
    public T visitJoinCondition(final EQLParser.JoinConditionContext ctx) {
        return defaultVisit();
    }

    @Override
    public T visitGroupBy(final EQLParser.GroupByContext ctx) {
        return defaultVisit();
    }

    @Override
    public T visitYieldAll(final EQLParser.YieldAllContext ctx) {
        return defaultVisit();
    }

    @Override
    public T visitYieldSome(final EQLParser.YieldSomeContext ctx) {
        return defaultVisit();
    }

    @Override
    public T visitYield1Tail(final EQLParser.Yield1TailContext ctx) {
        return defaultVisit();
    }

    @Override
    public T visitYieldManyTail(final EQLParser.YieldManyTailContext ctx) {
        return defaultVisit();
    }

    @Override
    public T visitAliasedYield(final EQLParser.AliasedYieldContext ctx) {
        return defaultVisit();
    }

    @Override
    public T visitYieldOperand_SingleOperand(final EQLParser.YieldOperand_SingleOperandContext ctx) {
        return defaultVisit();
    }

    @Override
    public T visitYieldOperandExpr(final EQLParser.YieldOperandExprContext ctx) {
        return defaultVisit();
    }

    @Override
    public T visitYieldOperand_CountAll(final EQLParser.YieldOperand_CountAllContext ctx) {
        return defaultVisit();
    }

    @Override
    public T visitYieldOperandFunction(final EQLParser.YieldOperandFunctionContext ctx) {
        return defaultVisit();
    }

    @Override
    public T visitYieldOperandFunctionName(final EQLParser.YieldOperandFunctionNameContext ctx) {
        return defaultVisit();
    }

    @Override
    public T visitYieldAlias(final EQLParser.YieldAliasContext ctx) {
        return defaultVisit();
    }

    @Override
    public T visitYield1Model(final EQLParser.Yield1ModelContext ctx) {
        return defaultVisit();
    }

    @Override
    public T visitYieldManyModel(final EQLParser.YieldManyModelContext ctx) {
        return defaultVisit();
    }

    @Override
    public T visitModel(final EQLParser.ModelContext ctx) {
        return defaultVisit();
    }

    @Override
    public T visitAndStandaloneCondition(final EQLParser.AndStandaloneConditionContext ctx) {
        return defaultVisit();
    }

    @Override
    public T visitStandaloneCondition_Predicate(final EQLParser.StandaloneCondition_PredicateContext ctx) {
        return defaultVisit();
    }

    @Override
    public T visitOrStandaloneCondition(final EQLParser.OrStandaloneConditionContext ctx) {
        return defaultVisit();
    }

    @Override
    public T visitOrderByOperand_Single(final EQLParser.OrderByOperand_SingleContext ctx) {
        return defaultVisit();
    }

    @Override
    public T visitOrderByOperand_Yield(final EQLParser.OrderByOperand_YieldContext ctx) {
        return defaultVisit();
    }

    @Override
    public T visitOrderByOperand_OrderingModel(final EQLParser.OrderByOperand_OrderingModelContext ctx) {
        return defaultVisit();
    }

    @Override
    public T visitOrder(final EQLParser.OrderContext ctx) {
        return defaultVisit();
    }

}
