package ua.com.fielden.platform.processors.metamodel.models;

import static java.lang.String.format;

import java.util.Objects;

import ua.com.fielden.platform.entity.AbstractEntity;
import ua.com.fielden.platform.processors.metamodel.IConvertableToPath;
import ua.com.fielden.platform.processors.metamodel. exceptions.EntityMetaModelException;

/**
 * The base class for all domain entity meta-models that get generated by {@code MetaModelProcessor}.
 * <p>
 * Any properties that have a type, which is meta-modelled, are represented as instances of a corresponding entity meta-model type.
 * This provides a way to traverse domain models definitions, but moving from properties to their sub-properties, and so on.
 *
 * @author TG Team
 *
 */
public abstract class EntityMetaModel implements IConvertableToPath {
    private final String path;
    /* This field should not be considered an attribute in the sort of sense that `path` is.
     * It should be used as a substitute for a getter method getAlias().
     * Because it is prefered to keep all subclasses clean of any instance methods to reduce
     * the probablity of a name conflict between a metamodeled property and an inherited method. */
    public String alias = null; // a static factory method should be provided by a subclass
    
    public EntityMetaModel(final String path) {
        if (path == null) {
            throw new EntityMetaModelException(format("%s constructor received null as an argument.", this.getClass().getSimpleName()));
        }

        this.path = path;
    }
    
    public EntityMetaModel() {
        this("");
    }
    
    protected final String joinPath(String propName) {
        if (!this.path.isEmpty()) {
            return format("%s.%s", this.path, propName);
        }

        return propName;
    }
    
    /**
     * Returns the dot-notated path captured in the context. If this entity meta-model has no surrounding context, then this method returns its alias in case the meta-model was aliased, otherwise {@code "this"} is returned.
     * <p> 
     * Example:
     * 
     * <pre>
     * var personBase = new PersonMetaModel();
     * personBase.toPath(); // "this"
     * 
     * var personWithContext = new PersonMetaModel("owner");
     * personWithContext.toPath(); // "owner"
     * 
     * var personAliased = PersonMetaModel.withAlias("p");
     * personAliased.toPath(); // "p"
     * </pre>
     */
    @Override
    public final String toPath() {
        if (path.isEmpty()) {
            return alias == null ? "this" : alias;
        }

        return this.path;
    }

    @Override
    public final String toString() {
        return toPath();
    }

    @Override
    public int hashCode() {
        return 31 + Objects.hashCode(path);
    }

    @Override
    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof EntityMetaModel)) {
            return false;
        }
        final EntityMetaModel that = (EntityMetaModel) obj;
        return Objects.equals(this.path, that.path);
    }

    /**
     * Returns the underlying entity class of this meta-model.
     * @return
     */
    public abstract Class<? extends AbstractEntity> getEntityClass();
}