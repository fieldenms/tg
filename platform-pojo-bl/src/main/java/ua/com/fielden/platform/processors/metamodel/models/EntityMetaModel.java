package ua.com.fielden.platform.processors.metamodel.models;

import ua.com.fielden.platform.entity.AbstractEntity;
import ua.com.fielden.platform.processors.metamodel.IConvertableToPath;
import ua.com.fielden.platform.processors.metamodel.exceptions.EntityMetaModelException;

import javax.annotation.Nonnull;
import java.util.Objects;

import static java.lang.String.format;

/**
 * The base class for all domain entity metamodels that get generated by {@code MetaModelProcessor}.
 * <p>
 * Any properties that have a type, which is meta-modelled, are represented as instances of a corresponding entity metamodel type.
 * This provides a way to traverse domain models definitions, but moving from properties to their sub-properties, and so on.
 *
 * @author TG Team
 *
 */
public abstract class EntityMetaModel implements IConvertableToPath {

    public static final String ERR_NULL_ARGUMENT = "%s constructor received null as an argument.";

    protected final String path;
    
    public EntityMetaModel(final String path) {
        if (path == null) {
            throw new EntityMetaModelException(ERR_NULL_ARGUMENT.formatted(this.getClass().getSimpleName()));
        }

        this.path = path;
    }
    
    public EntityMetaModel() {
        this("");
    }
    
    protected final String joinPath(String propName) {
        if (!this.path.isEmpty()) {
            return format("%s.%s", this.path, propName);
        }

        return propName;
    }
    
    /**
     * Returns the dot-notated path captured in the context. If this entity metamodel has no surrounding context, then this method returns its alias in case the meta-model was aliased, otherwise {@code "this"} is returned.
     * <p> 
     * Example:
     * 
     * <pre>
     * var person = MetaModels.Person_;
     * person.toPath();                 // "this"
     * person.user().toPath();          // "user"
     * person.user().email()>toPath();  // "user.email"
     * </pre>
     */
    @Override
    public @Nonnull String toPath() {
        return path.isEmpty() ? "this" : path;
    }

    @Override
    public @Nonnull final String toString() {
        return toPath();
    }

    @Override
    public int hashCode() {
        return 31 + Objects.hashCode(path);
    }

    @Override
    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof EntityMetaModel)) {
            return false;
        }
        
        final EntityMetaModel that = (EntityMetaModel) obj;
        if (this.getClass() != that.getClass()) {
            return false;
        }
        
        return Objects.equals(this.path, that.path);
    }

    /**
     * Returns the underlying entity class of this metamodel.
     * @return
     */
    public abstract Class<? extends AbstractEntity> getEntityClass();

}
