<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE log4j:configuration SYSTEM "log4j.dtd">
<log4j:configuration debug="false">
<!--
		An appender is an output destination, such as the console or a file;
		names of appenders are arbitrarily chosen.
		
		Appenders are active only when they are associated with at least one logger. 
		The same appender can be associated with several loggers.
	-->
	
	
	<!-- STDOUT appender - should be used for loggers when logging onto a console is required -->
	<appender name="stdout" class="org.apache.log4j.ConsoleAppender">
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern"
				value="[%-22.22t] %-5.5p %-22.22c %d{ISO8601} - %m%n" />
		</layout>
	</appender>

	<!-- 
		Once all the appenders are defied, it is possible to define all required loggers, which can be associated with one or more appenders.
		Loggers are named and can be accessed from the code by name. 
		
		However, log4j recognises hierarchical structure of logger names. For example, a logger with name "fielden" would be a parent to a logger with name "fielden.subpackage".
		Also, if one tries to obtain a logger by class and there is no logger with the full class name of that class then the closes in the hierarchy logger is returned.
		
		For example, if there is class "fielden.MyListenerClass" and there is no logger with that name, then the call Logger.getLogger(MyListenerClass.class) will return logger with name "fielden".
		It is important to note that loggers in the hierarchy propagate messages upwards to the parent. That is, having loggers "fielden" and "fielden.subpackage", would result in two messages when logging from child logger "fielden.subpackage".
		This is of course is the subject of associated appenders and log levels defined for each of them. The easiest way to prevent propagation is to set child logger property additivity="false".
		
		Also there is the root logger that is at the top of the loggers' hierarchy, which is also the default one. 
	 -->

	<!--
		Logger of top level category 'ua.com.fielden.platform.web'. Additional logger can be added any time if required.
	-->
	
	<logger name="ua.com.fielden.platform.security.session" additivity="false">
		<level value="debug" />
		<appender-ref ref="stdout" />
	</logger>
	<logger name="ua.com.fielden.platform.web" additivity="false">
		<level value="info" />
		<appender-ref ref="stdout" />
	</logger>
	<logger name="ua.com.fielden.platform.serialisation.api.impl.TgJackson" additivity="false">
		<level value="error" />
		<appender-ref ref="stdout" />
	</logger>
	<logger name="ua.com.fielden.platform.serialisation.jackson.EntityTypeInfoGetter" additivity="false">
		<level value="error" />
		<appender-ref ref="stdout" />
	</logger>
	<logger name="ua.com.fielden.platform.criteria.generator.impl.CriteriaGenerator" additivity="false">
		<level value="error" />
		<appender-ref ref="stdout" />
	</logger>
	
	<!-- Web UI resources -->
	<logger name="ua.com.fielden.platform.web.centre.CentreUpdater" additivity="false">
		<level value="info" />
		<appender-ref ref="stdout" />
	</logger>
	<logger name="ua.com.fielden.platform.web.resources.webui" additivity="false">
		<level value="info" />
		<appender-ref ref="stdout" />
	</logger>
	<logger name="ua.com.fielden.platform.web.resources.RestServerUtil" additivity="false">
		<level value="info" />
		<appender-ref ref="stdout" />
	</logger>
	<logger name="ua.com.fielden.platform.web.ioc.SourceControllerImpl" additivity="false">
		<level value="info" />
		<appender-ref ref="stdout" />
	</logger>
	
	<!-- Vulcanizing -->
	<logger name="ua.com.fielden.platform.web.utils.VulcanizingUtility" additivity="false">
		<level value="info" />
		<appender-ref ref="stdout" />
	</logger>
	<logger name="ua.com.fielden.platform.web.test.server.Vulcanize" additivity="false">
		<level value="info" />
		<appender-ref ref="stdout" />
	</logger>

	<!-- EQL -->
	<logger name="ua.com.fielden.platform.dao.QueryExecutionModel" additivity="false">
		<level value="error" />
		<appender-ref ref="stdout" />
	</logger>
	<logger name="ua.com.fielden.platform.entity.query.EntityHibernateRetrievalQueryProducer" additivity="false">
        <level value="error" />
        <appender-ref ref="stdout" />
    </logger>
		
	<!-- 
		Loggers for Hibernate.
	 -->
	<logger name="org.hibernate" additivity="false">
		<level value="error" />
		<appender-ref ref="stdout" />
	</logger>
	<logger name="org.hibernate.SQL" additivity="false">
		<level value="error" />
		<appender-ref ref="stdout" />
	</logger>
	<logger name="org.hibernate.type" additivity="false">
		<level value="error" />
		<appender-ref ref="stdout" />
	</logger>
	<logger name="org.hibernate.cache" additivity="false">
		<level value="error" />
		<appender-ref ref="stdout" />
	</logger>
	<logger name="org.hibernate.transaction" additivity="false">
		<level value="error" />
		<appender-ref ref="stdout" />
	</logger>
	<logger name="org.hibernate.jdbc" additivity="false">
		<level value="debug" />
		<appender-ref ref="stdout" />
	</logger>
	
	<!-- 
	  The root category is a parent to all loggers.
	  This means that if someone (e.g. third party library) is trying to obtain a nonexisting logger then root would be used instead.  
	  -->
	<root> 
		<level value="error" /> 
		<appender-ref ref="stdout" />		 
	</root>
</log4j:configuration>